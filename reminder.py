import os
import logging
import asyncio
import sqlite3
from datetime import datetime, time, timedelta
from typing import Dict, List, Optional, Union
import pytz
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    PhotoSize,
    Document
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.date import DateTrigger
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è ConversationHandler
(
    SETTING_REMINDER_TEXT,
    SETTING_REMINDER_TIME,
    SETTING_REMINDER_FREQUENCY,
    SETTING_REMINDER_COMMENT,
    SETTING_BATCH_REMINDERS,
    SETTING_BATCH_FREQUENCY,
    EDITING_REMINDER
) = range(7)  # –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å 7 —Å–æ—Å—Ç–æ—è–Ω–∏–π

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_TIMEZONE = 'Europe/Moscow'

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


class ReminderBot:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º
        self._scheduler_lock = asyncio.Lock()
        
        # –§–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        self._is_running = False
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
        self.application = None
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        self.scheduler = AsyncIOScheduler(timezone=pytz.timezone(DEFAULT_TIMEZONE))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        self._initialize_keyboards()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self._initialize_database()

    async def start_batch_reminders(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–ß–ß:–ú–ú –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
            "–ß–ß:–ú–ú –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "05:00 –ü–æ–¥—ä–µ–º\n"
            "06:00 –ó–∞—Ä—è–¥–∫–∞\n"
            "07:00 –ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
            reply_markup=self.cancel_keyboard
        )
        return SETTING_BATCH_REMINDERS

    async def parse_batch_reminders(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        if update.message.text == "üîô –û—Ç–º–µ–Ω–∞":
            await self.cancel_conversation(update, context)
            return ConversationHandler.END
        
        try:
            reminders = []
            for line in update.message.text.split('\n'):
                if not line.strip():
                    continue
                time_part, *text_parts = line.strip().split()
                time.strptime(time_part, "%H:%M")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
                text = ' '.join(text_parts)
                reminders.append({'time': time_part, 'text': text})
            
            if not reminders:
                raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
            
            context.user_data['batch_reminders'] = reminders
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
            keyboard = [
                [InlineKeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data='daily')],
                [InlineKeyboardButton("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data='weekly')],
                [InlineKeyboardButton("–ü–æ –±—É–¥–Ω—è–º (–ü–Ω-–ü—Ç)", callback_data='weekdays')],
                [InlineKeyboardButton("–ü–Ω, –°—Ä, –ü—Ç", callback_data='mon_wed_fri')],
                [InlineKeyboardButton("–í—Ç, –ß—Ç", callback_data='tue_thu')]
            ]
            
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return SETTING_BATCH_FREQUENCY
            
        except ValueError as e:
            await update.message.reply_text(
                f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: {str(e)}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "–ß–ß:–ú–ú –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
                "–ß–ß:–ú–ú –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
                reply_markup=self.cancel_keyboard
            )
            return SETTING_BATCH_REMINDERS

    async def set_batch_frequency(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        query = update.callback_query
        await query.answer()
        
        frequency_map = {
            'daily': "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ",
            'weekly': "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ",
            'weekdays': "–ü–æ –±—É–¥–Ω—è–º (–ü–Ω-–ü—Ç)",
            'mon_wed_fri': "–ü–Ω, –°—Ä, –ü—Ç",
            'tue_thu': "–í—Ç, –ß—Ç"
        }
        
        frequency = query.data
        context.user_data['batch_frequency'] = frequency
        context.user_data['batch_frequency_text'] = frequency_map[frequency]
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        user_id = query.from_user.id
        created_count = 0
        
        for reminder in context.user_data['batch_reminders']:
            job_id = f"rem_{user_id}_{datetime.now().timestamp()}_{created_count}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.save_reminder_to_database(
                user_id=user_id,
                job_id=job_id,
                reminder_text=reminder['text'],
                reminder_time=reminder['time'],
                frequency=frequency,
                frequency_text=frequency_map[frequency],
                comment=None
            )
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            reminder_data = {
                'job_id': job_id,
                'text': reminder['text'],
                'time': reminder['time'],
                'frequency': frequency,
                'frequency_text': frequency_map[frequency],
                'comment': None
            }
            await self.schedule_reminder(user_id, reminder_data)
            created_count += 1
        
        await query.edit_message_text(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {created_count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é {frequency_map[frequency]}!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–µ –∏–∑ –Ω–∏—Ö, –¥–æ–±–∞–≤–∏–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.",
            reply_markup=self.main_menu_keyboard
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö ID –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data['created_job_ids'] = [f"rem_{user_id}_{datetime.now().timestamp()}_{i}" 
                                            for i in range(created_count)]
        
        context.user_data.clear()
        return ConversationHandler.END

    async def start_edit_reminder(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å ID —á–µ—Ä–µ–∑ /list",
            reply_markup=self.cancel_keyboard
        )
        return EDITING_REMINDER

    async def edit_reminder(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        if update.message.text == "üîô –û—Ç–º–µ–Ω–∞":
            await self.cancel_conversation(update, context)
            return ConversationHandler.END
        
        job_id = update.message.text.strip()
        user_id = update.message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        connection = sqlite3.connect('reminders.db')
        cursor = connection.cursor()
        cursor.execute(
            'SELECT 1 FROM reminders WHERE user_id = ? AND job_id = ?',
            (user_id, job_id)
        )
        exists = cursor.fetchone()
        connection.close()
        
        if not exists:
            await update.message.reply_text(
                "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=self.cancel_keyboard
            )
            return EDITING_REMINDER
        
        context.user_data['editing_job_id'] = job_id
        
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª):",
            reply_markup=self.skip_keyboard
        )
        return SETTING_REMINDER_COMMENT

    async def update_reminder_comment(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        user = update.effective_user
        job_id = context.user_data['editing_job_id']
        
        if update.message.text == "üîô –û—Ç–º–µ–Ω–∞":
            await self.cancel_conversation(update, context)
            return ConversationHandler.END
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π
        comment = None
        if update.message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            if update.message.photo:
                photo = update.message.photo[-1]
                comment = {
                    'type': 'photo',
                    'file_id': photo.file_id,
                    'caption': update.message.caption
                }
            elif update.message.document:
                document = update.message.document
                comment = {
                    'type': 'document',
                    'file_id': document.file_id,
                    'file_name': document.file_name,
                    'caption': update.message.caption
                }
            else:
                comment = {
                    'type': 'text',
                    'content': update.message.text
                }
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = sqlite3.connect('reminders.db')
        cursor = connection.cursor()
        
        cursor.execute(
            '''
            UPDATE reminders SET
                comment_type = ?,
                comment_text = ?,
                comment_file_id = ?,
                comment_file_name = ?
            WHERE job_id = ?
            ''',
            (
                comment['type'] if comment else None,
                comment.get('content') if comment else None,
                comment.get('file_id') if comment else None,
                comment.get('file_name') if comment else None,
                job_id
            )
        )
        
        connection.commit()
        connection.close()
        
        await update.message.reply_text(
            "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=self.main_menu_keyboard
        )
        
        context.user_data.clear()
        return ConversationHandler.END

    # –ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    async def get_user_timezone(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É –ë–î

        connection = sqlite3.connect('reminders.db')
        cursor = connection.cursor()

        cursor.execute(
            'SELECT timezone FROM user_timezones WHERE user_id = ?',
            (user_id,)
        )
        result = cursor.fetchone()
        connection.close()

        return result[0] if result else DEFAULT_TIMEZONE

    async def set_user_timezone(self, user_id: int, timezone: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        connection = sqlite3.connect('reminders.db')
        cursor = connection.cursor()

        cursor.execute(
            '''
            INSERT OR REPLACE INTO user_timezones (user_id, timezone)
            VALUES (?, ?)
            ''',
            (user_id, timezone)
        )

        connection.commit()
        connection.close()
    

    def _initialize_database(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not os.path.exists('reminders.db'):
            logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö reminders.db")
            
        conn = sqlite3.connect('reminders.db')
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS reminders (
            user_id INTEGER NOT NULL,
            job_id TEXT PRIMARY KEY,
            reminder_text TEXT NOT NULL,
            reminder_time TEXT NOT NULL,
            frequency TEXT NOT NULL,
            frequency_text TEXT NOT NULL,
            comment_type TEXT,
            comment_text TEXT,
            comment_file_id TEXT,
            comment_file_name TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_timezones (
            user_id INTEGER PRIMARY KEY,
            timezone TEXT NOT NULL,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )''')
        
        conn.commit()
        conn.close()
    
    def _initialize_keyboards(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä –±–æ—Ç–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        self.main_menu_keyboard = ReplyKeyboardMarkup(
        [
            [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"), KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ")],
            [KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
            [KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton("üåç –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å")],
            [KeyboardButton("üîÑ –¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")]
        ],
        resize_keyboard=True
    )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π
        self.cancel_keyboard = ReplyKeyboardMarkup(
            [[KeyboardButton("üîô –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        self.skip_keyboard = ReplyKeyboardMarkup(
            [
                [KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
                [KeyboardButton("üîô –û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True
        )

    async def load_all_reminders(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if not self.scheduler.running:
            self.scheduler.start(paused=True)  # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
            
        connection = sqlite3.connect('reminders.db')
        cursor = connection.cursor()
        cursor.execute('SELECT * FROM reminders')
        
        for reminder in cursor.fetchall():
            try:
                # ... –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...
                self.scheduler.add_job(
                    self.send_reminder,
                    trigger=trigger,
                    args=[user_id, job_id],
                    id=job_id,
                    replace_existing=True,
                    misfire_grace_time=60  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ
                )
            except Exception as e:
                logger.error(f"Failed to load reminder {job_id}: {str(e)}")
        
        if self.scheduler.state == 1:  # STATE_PAUSED
            self.scheduler.resume()

    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        timezone = await self.get_user_timezone(user.id)
        
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
            f"–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.\n"
            f"–¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/add - —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
            "/list - —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
            "/help - –ø–æ–º–æ—â—å",
            reply_markup=self.main_menu_keyboard
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
    üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞</b>:

    <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
    /start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
    /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
    /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞

    <b>–†–∞–±–æ—Ç–∞ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:</b>
    /add - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    /list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    /delete [ID] - –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ

    <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
    /timezone - –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    /test - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ

    ‚Ñπ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.
    """
        await update.message.reply_text(help_text, parse_mode='HTML')

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        status_lines = [
            "üîÑ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>",
            f"‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {'—Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ' if self._is_running else '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚ùå'}",
            f"‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –±–∞–∑–µ: {self._count_reminders()}",
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {len(self.scheduler.get_jobs()) if hasattr(self, 'scheduler') else 0}",
            f"‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {await self.get_user_timezone(update.effective_user.id)}"
        ]
        await update.message.reply_text("\n".join(status_lines), parse_mode='HTML')

    def _count_reminders(self) -> int:
        """–ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –±–∞–∑–µ"""
        try:
            conn = sqlite3.connect('reminders.db')
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM reminders')
            count = cursor.fetchone()[0]
            conn.close()
            return count
        except:
            return 0

    async def list_reminders(self, update: Update):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        user = update.effective_user
        reminders = await self.get_user_reminders(user.id)
        
        if not reminders:
            await update.message.reply_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
                reply_markup=self.main_menu_keyboard
            )
            return
        
        message = ["üìã <b>–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>:\n"]
        for i, reminder in enumerate(reminders, 1):
            message.append(
                f"{i}. {reminder['text']}\n"
                f"   ‚è∞ {reminder['time']} ({reminder['frequency_text']})\n"
                f"   üÜî {reminder['job_id']}\n"
            )
        
        await update.message.reply_text(
            "\n".join(message),
            parse_mode='HTML',
            reply_markup=self.main_menu_keyboard
        )

    async def handle_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        text = update.message.text
        
        if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
            return await self.start_reminder_creation(update, context)
        elif text == "üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π":
            return await self.list_reminders(update)
        elif text == "‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
            return await self.show_delete_menu(update)
        elif text == "üåç –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å":
            return await self.show_timezone_menu(update)
        elif text == "üîÑ –¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
            return await self.send_test_reminder(update)
        else:
            await update.message.reply_text(
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /help",
                reply_markup=self.main_menu_keyboard
            )
    

    async def start_reminder_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
            reply_markup=self.cancel_keyboard
        )
        return SETTING_REMINDER_TEXT

    async def set_reminder_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        if update.message.text == "üîô –û—Ç–º–µ–Ω–∞":
            await self.cancel_conversation(update, context)
            return ConversationHandler.END
        
        context.user_data['reminder'] = {
            'text': update.message.text,
            'user_id': update.message.from_user.id
        }
        
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):",
            reply_markup=self.cancel_keyboard
        )
        return SETTING_REMINDER_TIME

    async def set_reminder_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        if update.message.text == "üîô –û—Ç–º–µ–Ω–∞":
            await self.cancel_conversation(update, context)
            return ConversationHandler.END
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
            datetime.strptime(update.message.text, "%H:%M")
            context.user_data['reminder']['time'] = update.message.text
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
            keyboard = [
                [InlineKeyboardButton("–û–¥–∏–Ω —Ä–∞–∑", callback_data='once')],
                [InlineKeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data='daily')],
                [InlineKeyboardButton("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data='weekly')],
                [InlineKeyboardButton("–ü–æ –±—É–¥–Ω—è–º (–ü–Ω-–ü—Ç)", callback_data='weekdays')],
                [InlineKeyboardButton("–ü–Ω, –°—Ä, –ü—Ç", callback_data='mon_wed_fri')],
                [InlineKeyboardButton("–í—Ç, –ß—Ç", callback_data='tue_thu')]
            ]
            
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return SETTING_REMINDER_FREQUENCY
            
        except ValueError:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30):",
                reply_markup=self.cancel_keyboard
            )
            return SETTING_REMINDER_TIME

    async def set_reminder_frequency(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        frequency_map = {
            'once': "–û–¥–∏–Ω —Ä–∞–∑",
            'daily': "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ",
            'weekly': "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ",
            'weekdays': "–ü–æ –±—É–¥–Ω—è–º (–ü–Ω-–ü—Ç)",
            'mon_wed_fri': "–ü–Ω, –°—Ä, –ü—Ç",
            'tue_thu': "–í—Ç, –ß—Ç"
        }
        
        frequency = query.data
        context.user_data['reminder']['frequency'] = frequency
        context.user_data['reminder']['frequency_text'] = frequency_map[frequency]
        
        await query.edit_message_text(
            f"–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {frequency_map[frequency]}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'."
        )
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text="–û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è...",
            reply_markup=self.skip_keyboard
        )
        return SETTING_REMINDER_COMMENT

    async def set_reminder_comment(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—é"""
        user = update.effective_user
        reminder = context.user_data['reminder']
        
        if update.message.text == "üîô –û—Ç–º–µ–Ω–∞":
            await self.cancel_conversation(update, context)
            return ConversationHandler.END
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π
        comment = None
        if update.message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            if update.message.photo:
                photo = update.message.photo[-1]
                comment = {
                    'type': 'photo',
                    'file_id': photo.file_id,
                    'caption': update.message.caption
                }
            elif update.message.document:
                document = update.message.document
                comment = {
                    'type': 'document',
                    'file_id': document.file_id,
                    'file_name': document.file_name,
                    'caption': update.message.caption
                }
            else:
                comment = {
                    'type': 'text',
                    'content': update.message.text
                }
        
        # –°–æ–∑–¥–∞–Ω–∏–µ ID –∑–∞–¥–∞—á–∏
        job_id = f"rem_{user.id}_{datetime.now().timestamp()}"
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await self.save_reminder_to_database(
            user_id=user.id,
            job_id=job_id,
            reminder_text=reminder['text'],
            reminder_time=reminder['time'],
            frequency=reminder['frequency'],
            frequency_text=reminder['frequency_text'],
            comment=comment
        )
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        reminder_data = {
            'job_id': job_id,
            'text': reminder['text'],
            'time': reminder['time'],
            'frequency': reminder['frequency'],
            'frequency_text': reminder['frequency_text'],
            'comment': comment
        }
        await self.schedule_reminder(user.id, reminder_data)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
        timezone = await self.get_user_timezone(user.id)
        message = (
            "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
            f"üìù –¢–µ–∫—Å—Ç: {reminder['text']}\n"
            f"‚è∞ –í—Ä–µ–º—è: {reminder['time']} ({timezone})\n"
            f"üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {reminder['frequency_text']}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {self._format_comment(comment)}"
        )
        
        await update.message.reply_text(
            message,
            reply_markup=self.main_menu_keyboard
        )
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        context.user_data.clear()
        return ConversationHandler.END

    async def skip_comment(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        return await self.set_reminder_comment(update, context)

    async def cancel_conversation(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        context.user_data.clear()
        await update.message.reply_text(
            "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=self.main_menu_keyboard
        )
        return ConversationHandler.END

    def _format_comment(self, comment: Optional[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not comment:
            return "–Ω–µ—Ç"
        
        if comment['type'] == 'text':
            return f"—Ç–µ–∫—Å—Ç: {comment['content']}"
        elif comment['type'] == 'photo':
            return "—Ñ–æ—Ç–æ" + (f" ({comment['caption']})" if comment.get('caption') else "")
        elif comment['type'] == 'document':
            return f"–¥–æ–∫—É–º–µ–Ω—Ç: {comment.get('file_name', '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}" + \
                (f" ({comment['caption']})" if comment.get('caption') else "")
        return "–≤–ª–æ–∂–µ–Ω–∏–µ"
   
    async def save_reminder_to_database(
        self,
        user_id: int,
        job_id: str,
        reminder_text: str,
        reminder_time: str,
        frequency: str,
        frequency_text: str,
        comment: Optional[Dict] = None
    ):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect('reminders.db')
        cursor = conn.cursor()
        
        cursor.execute(
            '''
            INSERT INTO reminders (
                user_id, job_id, reminder_text, reminder_time,
                frequency, frequency_text, comment_type,
                comment_text, comment_file_id, comment_file_name
            )
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''',
            (
                user_id, job_id, reminder_text, reminder_time,
                frequency, frequency_text,
                comment['type'] if comment else None,
                comment.get('content') if comment else None,
                comment.get('file_id') if comment else None,
                comment.get('file_name') if comment else None
            )
        )
        
        conn.commit()
        conn.close()

    async def schedule_reminder(self, user_id: int, reminder: Dict):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ scheduler"""
        try:
            hour, minute = map(int, reminder['time'].split(':'))
            timezone = pytz.timezone(await self.get_user_timezone(user_id))
            
            if reminder['frequency'] == 'once':
                now = datetime.now(timezone)
                reminder_time = timezone.localize(datetime.combine(now.date(), time(hour, minute)))
                if reminder_time < now:
                    reminder_time += timedelta(days=1)
                trigger = DateTrigger(reminder_time)
            else:
                frequency_map = {
                    'daily': '*',
                    'weekly': 'sun-sat',
                    'weekdays': 'mon-fri',
                    'mon_wed_fri': 'mon,wed,fri',
                    'tue_thu': 'tue,thu'
                }
                trigger = CronTrigger(
                    hour=hour,
                    minute=minute,
                    day_of_week=frequency_map[reminder['frequency']],
                    timezone=timezone
                )
            
            self.scheduler.add_job(
                self.send_reminder,
                trigger=trigger,
                args=[user_id, reminder['job_id']],
                id=reminder['job_id'],
                replace_existing=True,
                misfire_grace_time=300
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        
    async def send_reminder(self, user_id: int, job_id: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            connection = sqlite3.connect('reminders.db')
            cursor = connection.cursor()

            cursor.execute(
                'SELECT reminder_text, reminder_time, frequency, comment_type, comment_text, comment_file_id FROM reminders WHERE job_id = ?',
                (job_id,)
            )
            reminder = cursor.fetchone()
            connection.close()

            if not reminder:
                logger.error(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {job_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return

            text, time_str, frequency, comment_type, comment_text, comment_file_id = reminder

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            timezone = pytz.timezone(await self.get_user_timezone(user_id))
            current_time = datetime.now(timezone).strftime('%H:%M %Z')
            message = f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}\nüïí –í–∞—à–µ –≤—Ä–µ–º—è: {current_time}"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            if comment_type:
                comment = {
                    'type': comment_type,
                    'content': comment_text,
                    'file_id': comment_file_id
                }

                if comment['type'] == 'text':
                    await self.application.bot.send_message(
                        chat_id=user_id,
                        text=f"{message}\n\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment['content']}"
                    )
                elif comment['type'] == 'photo':
                    await self.application.bot.send_photo(
                        chat_id=user_id,
                        photo=comment['file_id'],
                        caption=message + (f"\n\nüí¨ {comment['content']}" if comment['content'] else "")
                    )
                elif comment['type'] == 'document':
                    await self.application.bot.send_document(
                        chat_id=user_id,
                        document=comment['file_id'],
                        caption=message + (f"\n\nüí¨ {comment['content']}" if comment['content'] else "")
                    )
            else:
                await self.application.bot.send_message(
                    chat_id=user_id,
                    text=message
                )

            # –ï—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ - —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if frequency == 'once':
                await self.delete_reminder_from_database(job_id)

            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {job_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        except telegram.error.Forbidden:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            await self.delete_reminder_from_database(job_id)
        except Exception as error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {job_id}: {error}")

    async def show_reminders_list(self, update: Update):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        reminders = await self.get_user_reminders(user.id)

        if not reminders:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
                reply_markup=self.main_menu_keyboard
            )
            return

        message = "üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
        for i, reminder in enumerate(reminders, 1):
            message += (
                f"{i}. {reminder['text']}\n"
                f"   ‚è∞ –í—Ä–µ–º—è: {reminder['time']}\n"
                f"   üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {reminder['frequency_text']}\n"
                f"   üÜî ID: {reminder['job_id']}\n\n"
            )

        await update.message.reply_text(
            message,
            reply_markup=self.main_menu_keyboard
        )

    async def show_delete_menu(self, update: Update):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        user = update.effective_user
        reminders = await self.get_user_reminders(user.id)

        if not reminders:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
                reply_markup=self.main_menu_keyboard
            )
            return

        keyboard = []
        for reminder in reminders:
            keyboard.append(
                [KeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {reminder['job_id']}")]
            )

        keyboard.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )

    async def delete_reminder(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        user = update.effective_user
        job_id = update.message.text.replace("‚ùå –£–¥–∞–ª–∏—Ç—å ", "").strip()
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await self.delete_reminder_from_database(job_id)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        try:
            self.scheduler.remove_job(job_id)
        except:
            pass
        
        await update.message.reply_text(
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {job_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.",
            reply_markup=self.main_menu_keyboard
        )

    # –ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
    async def show_timezone_menu(self, update: Update):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
        keyboard = [
            [InlineKeyboardButton("–ú–æ—Å–∫–≤–∞ (MSK)", callback_data='Europe/Moscow')],
            [InlineKeyboardButton("–ö–∏–µ–≤ (EET)", callback_data='Europe/Kiev')],
            [InlineKeyboardButton("–õ–æ–Ω–¥–æ–Ω (GMT)", callback_data='Europe/London')],
            [InlineKeyboardButton("–ù—å—é-–ô–æ—Ä–∫ (EST)", callback_data='America/New_York')]
        ]

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_timezone_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
        query = update.callback_query
        await query.answer()

        user = query.from_user
        timezone = query.data

        await self.set_user_timezone(user.id, timezone)

        await query.edit_message_text(
            f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {timezone}",
            reply_markup=self.main_menu_keyboard
        )

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    async def send_test_reminder(self, update: Update):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        user = update.effective_user
        timezone = await self.get_user_timezone(user.id)

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        job_id = f"test_{user.id}_{datetime.now().timestamp()}"
        reminder_data = {
            'job_id': job_id,
            'text': "–¢–ï–°–¢–û–í–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï",
            'time': (datetime.now(pytz.timezone(timezone)) + timedelta(minutes=1)).strftime('%H:%M'),
            'frequency': 'once',
            'frequency_text': '–û–¥–∏–Ω —Ä–∞–∑',
            'comment': None
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await self.save_reminder_to_database(
            user_id=user.id,
            job_id=job_id,
            reminder_text=reminder_data['text'],
            reminder_time=reminder_data['time'],
            frequency=reminder_data['frequency'],
            frequency_text=reminder_data['frequency_text'],
            comment=None
        )

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º
        await self.schedule_reminder(user.id, reminder_data)

        await update.message.reply_text(
            f"–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É.\n"
            f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}",
            reply_markup=self.main_menu_keyboard
        )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤ –±–æ—Ç–µ"""
        logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ:", exc_info=context.error)

        if update and update.message:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=self.main_menu_keyboard
            )


    async def _load_reminders_from_database(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            conn = sqlite3.connect('reminders.db')
            cursor = conn.cursor()
            cursor.execute('SELECT user_id, job_id, reminder_text, reminder_time, frequency FROM reminders')
            reminders = cursor.fetchall()
            
            loaded_count = 0
            
            for reminder in reminders:
                try:
                    user_id, job_id, text, time_str, frequency = reminder
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    hour, minute = map(int, time_str.split(':'))
                    timezone = pytz.timezone(await self.get_user_timezone(user_id))
                    
                    if frequency == 'once':
                        now = datetime.now(timezone)
                        reminder_time = timezone.localize(datetime.combine(now.date(), time(hour, minute)))
                        if reminder_time < now:
                            reminder_time += timedelta(days=1)
                        trigger = DateTrigger(reminder_time)
                    else:
                        frequency_map = {
                            'daily': '*',
                            'weekly': 'sun-sat',
                            'weekdays': 'mon-fri',
                            'mon_wed_fri': 'mon,wed,fri',
                            'tue_thu': 'tue,thu'
                        }
                        trigger = CronTrigger(
                            hour=hour,
                            minute=minute,
                            day_of_week=frequency_map[frequency],
                            timezone=timezone
                        )
                    
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                    if not self.scheduler.get_job(job_id):
                        self.scheduler.add_job(
                            self.send_reminder,
                            trigger=trigger,
                            args=[user_id, job_id],
                            id=job_id,
                            replace_existing=True,
                            misfire_grace_time=300
                        )
                        loaded_count += 1
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {job_id}: {e}")
            
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        finally:
            conn.close()


    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        if self._is_running:
            raise RuntimeError("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            
        self._is_running = True
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
            self.application = Application.builder() \
                .token(os.getenv("TELEGRAM_BOT_TOKEN")) \
                .build()

            # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await self._load_reminders_from_database()

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
            self._setup_handlers()

            # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            async with self._scheduler_lock:
                if not self.scheduler.running:
                    self.scheduler.start()
                    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
            await self.application.initialize()
            await self.application.start()
            
            # –ó–∞–ø—É—Å–∫ long-polling
            await self.application.updater.start_polling(
                drop_pending_updates=True,
                timeout=20,
                connect_timeout=10
            )
            
            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã
            while self._is_running:
                await asyncio.sleep(5)
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
                if not self.scheduler.running:
                    logger.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
                    try:
                        async with self._scheduler_lock:
                            self.scheduler.start()
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        finally:
            await self._safe_shutdown()

    

    async def _safe_shutdown(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞"""
        logger.info("Starting safe shutdown...")
        self._is_running = False
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if self.application:
            try:
                if self.application.running:
                    await self.application.stop()
                    await self.application.shutdown()
            except Exception as e:
                logger.error(f"Application shutdown error: {e}")

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        async with self._scheduler_lock:
            if hasattr(self, 'scheduler'):
                try:
                    if self.scheduler.running:
                        self.scheduler.shutdown(wait=False)
                except Exception as e:
                    logger.error(f"Scheduler shutdown error: {e}")
        
        logger.info("Shutdown completed")

    async def ping(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
        await update.message.reply_text("üü¢ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")

    async def get_user_reminders(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        connection = sqlite3.connect('reminders.db')
        cursor = connection.cursor()

        cursor.execute(
            'SELECT job_id, reminder_text, reminder_time, frequency, frequency_text FROM reminders WHERE user_id = ?',
            (user_id,)
        )
        
        reminders = []
        for row in cursor.fetchall():
            job_id, text, time_str, frequency, freq_text = row
            reminders.append({
                'job_id': job_id,
                'text': text,
                'time': time_str,
                'frequency': frequency,
                'frequency_text': freq_text
            })
        
        connection.close()
        return reminders

    async def delete_reminder_from_database(self, job_id: str):
        """–£–¥–∞–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        connection = sqlite3.connect('reminders.db')
        cursor = connection.cursor()

        cursor.execute(
            'DELETE FROM reminders WHERE job_id = ?',
            (job_id,)
        )
        
        connection.commit()
        connection.close()

    async def add_reminder_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        return await self.start_reminder_creation(update, context)

    async def list_reminders_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        await self.list_reminders(update)

    async def delete_reminder_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        if not context.args:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: /delete rem_123456789",
                reply_markup=self.main_menu_keyboard
            )
            return
        
        job_id = context.args[0]
        await self.delete_reminder_from_database(job_id)
        
        try:
            self.scheduler.remove_job(job_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        
        await update.message.reply_text(
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {job_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.",
            reply_markup=self.main_menu_keyboard
        )

    async def timezone_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /timezone –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
        await self.show_timezone_menu(update)

    async def test_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        await self.send_test_reminder(update)

    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # ConversationHandler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler('add', self.add_reminder_command),
                MessageHandler(filters.Regex(r'^‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ$'), self.start_reminder_creation)
            ],
            states={
                SETTING_REMINDER_TEXT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.set_reminder_text)
                ],
                SETTING_REMINDER_TIME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.set_reminder_time)
                ],
                SETTING_REMINDER_FREQUENCY: [
                    CallbackQueryHandler(self.set_reminder_frequency)
                ],
                SETTING_REMINDER_COMMENT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.set_reminder_comment),
                    MessageHandler(filters.PHOTO, self.set_reminder_comment),
                    MessageHandler(filters.Document.ALL, self.set_reminder_comment),
                    MessageHandler(filters.Regex(r'^–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å$'), self.skip_comment)
                ]
            },
            fallbacks=[
                CommandHandler('cancel', self.cancel_conversation),
                MessageHandler(filters.Regex(r'^üîô –û—Ç–º–µ–Ω–∞$'), self.cancel_conversation)
            ]
        )

        # ConversationHandler –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        batch_conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler('batch', self.start_batch_reminders),
                MessageHandler(filters.Regex(r'^üìù –î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ$'), self.start_batch_reminders)
            ],
            states={
                SETTING_BATCH_REMINDERS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.parse_batch_reminders)
                ],
                SETTING_BATCH_FREQUENCY: [
                    CallbackQueryHandler(self.set_batch_frequency)
                ]
            },
            fallbacks=[
                CommandHandler('cancel', self.cancel_conversation),
                MessageHandler(filters.Regex(r'^üîô –û—Ç–º–µ–Ω–∞$'), self.cancel_conversation)
            ]
        )

        # ConversationHandler –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        edit_conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler('edit', self.start_edit_reminder),
                MessageHandler(filters.Regex(r'^‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å$'), self.start_edit_reminder)
            ],
            states={
                EDITING_REMINDER: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.edit_reminder)
                ],
                SETTING_REMINDER_COMMENT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.update_reminder_comment),
                    MessageHandler(filters.PHOTO, self.update_reminder_comment),
                    MessageHandler(filters.Document.ALL, self.update_reminder_comment),
                    MessageHandler(filters.Regex(r'^–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å$'), self.skip_comment)
                ]
            },
            fallbacks=[
                CommandHandler('cancel', self.cancel_conversation),
                MessageHandler(filters.Regex(r'^üîô –û—Ç–º–µ–Ω–∞$'), self.cancel_conversation)
            ]
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.application.add_handler(CommandHandler('start', self.start_command))
        self.application.add_handler(CommandHandler('help', self.help_command))
        self.application.add_handler(CommandHandler('status', self.status_command))
        self.application.add_handler(CommandHandler('list', self.list_reminders_command))
        self.application.add_handler(CommandHandler('delete', self.delete_reminder_command))
        self.application.add_handler(CommandHandler('timezone', self.timezone_command))
        self.application.add_handler(CommandHandler('test', self.test_command))
        self.application.add_handler(conv_handler)
        self.application.add_handler(batch_conv_handler)
        self.application.add_handler(edit_conv_handler)
        self.application.add_handler(MessageHandler(filters.TEXT, self.handle_main_menu))
        self.application.add_handler(CallbackQueryHandler(self.handle_timezone_selection))
        self.application.add_handler(MessageHandler(filters.Regex(r'^‚ùå –£–¥–∞–ª–∏—Ç—å '), self.delete_reminder))
        self.application.add_error_handler(self.error_handler)
        
if __name__ == '__main__':
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = ReminderBot()
    
    try:
        asyncio.run(bot.run())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")