import os
import logging
import asyncio
import sqlite3
from datetime import datetime, time, timedelta
from typing import Dict, List, Optional, Tuple
import pytz
import telegram
from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    PhotoSize,
    Document
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.date import DateTrigger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(
    SETTING_REMINDER_TEXT,
    SETTING_REMINDER_TIME,
    SETTING_REMINDER_FREQUENCY,
    SETTING_REMINDER_COMMENT
) = range(4)

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_TIMEZONE = 'Europe/Moscow'
load_dotenv(".env")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def initialize_database():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
    connection = sqlite3.connect('reminders.db')
    cursor = connection.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS reminders (
        user_id INTEGER NOT NULL,
        job_id TEXT PRIMARY KEY,
        reminder_text TEXT NOT NULL,
        reminder_time TEXT NOT NULL,
        frequency TEXT NOT NULL,
        frequency_text TEXT NOT NULL,
        comment_type TEXT,
        comment_text TEXT,
        comment_file_id TEXT,
        comment_file_name TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_timezones (
        user_id INTEGER PRIMARY KEY,
        timezone TEXT NOT NULL,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')

    connection.commit()
    connection.close()


initialize_database()


class ReminderBot:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""

        if not os.path.exists('reminders.db'):
            open('reminders.db', 'w').close()

        self.application: Optional[Application] = None
        self.scheduler = AsyncIOScheduler(timezone=pytz.timezone(DEFAULT_TIMEZONE))

        # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        self.main_menu_keyboard = ReplyKeyboardMarkup(
            [
                [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
                [KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
                [KeyboardButton("üåç –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å"), KeyboardButton("üîÑ –¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")]
            ],
            resize_keyboard=True
        )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã
        self.cancel_keyboard = ReplyKeyboardMarkup(
            [[KeyboardButton("üîô –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )

    # –ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    async def get_user_timezone(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É –ë–î

        connection = sqlite3.connect('reminders.db')
        cursor = connection.cursor()

        cursor.execute(
            'SELECT timezone FROM user_timezones WHERE user_id = ?',
            (user_id,)
        )
        result = cursor.fetchone()
        connection.close()

        return result[0] if result else DEFAULT_TIMEZONE

    async def set_user_timezone(self, user_id: int, timezone: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        connection = sqlite3.connect('reminders.db')
        cursor = connection.cursor()

        cursor.execute(
            '''
            INSERT OR REPLACE INTO user_timezones (user_id, timezone)
            VALUES (?, ?)
            ''',
            (user_id, timezone)
        )

        connection.commit()
        connection.close()

    async def save_reminder_to_database(
            self,
            user_id: int,
            job_id: str,
            reminder_text: str,
            reminder_time: str,
            frequency: str,
            frequency_text: str,
            comment: Optional[Dict] = None
    ):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        connection = sqlite3.connect('reminders.db')
        cursor = connection.cursor()

        cursor.execute(
            '''
            INSERT INTO reminders (
                user_id, job_id, reminder_text, reminder_time,
                frequency, frequency_text, comment_type,
                comment_text, comment_file_id, comment_file_name
            )
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''',
            (
                user_id, job_id, reminder_text, reminder_time,
                frequency, frequency_text,
                comment['type'] if comment else None,
                comment['content'] if comment and comment['type'] == 'text' else None,
                comment['file_id'] if comment and comment['type'] in ('photo', 'document') else None,
                comment.get('file_name') if comment and comment['type'] == 'document' else None
            )
        )

        connection.commit()
        connection.close()

    async def delete_reminder_from_database(self, job_id: str):
        """–£–¥–∞–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        connection = sqlite3.connect('reminders.db')
        cursor = connection.cursor()

        cursor.execute(
            'DELETE FROM reminders WHERE job_id = ?',
            (job_id,)
        )

        connection.commit()
        connection.close()

    async def get_user_reminders(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        connection = sqlite3.connect('reminders.db')
        cursor = connection.cursor()

        cursor.execute(
            'SELECT * FROM reminders WHERE user_id = ?',
            (user_id,)
        )
        reminders = cursor.fetchall()
        connection.close()

        result = []
        for reminder in reminders:
            _, job_id, text, time_str, frequency, freq_text, comment_type, comment_text, comment_file_id, comment_file_name, _ = reminder

            comment = None
            if comment_type:
                comment = {
                    'type': comment_type,
                    'content': comment_text,
                    'file_id': comment_file_id,
                    'file_name': comment_file_name
                }

            result.append({
                'job_id': job_id,
                'text': text,
                'time': time_str,
                'frequency': frequency,
                'frequency_text': freq_text,
                'comment': comment
            })

        return result

    async def load_all_reminders(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        connection = sqlite3.connect('reminders.db')
        cursor = connection.cursor()

        cursor.execute('SELECT * FROM reminders')
        all_reminders = cursor.fetchall()
        connection.close()

        for reminder in all_reminders:
            user_id = reminder[0]
            job_id = reminder[1]
            text = reminder[2]
            time_str = reminder[3]
            frequency = reminder[4]
            freq_text = reminder[5]
            comment_type = reminder[6]
            comment_text = reminder[7]
            comment_file_id = reminder[8]
            comment_file_name = reminder[9]

            comment = None
            if comment_type:
                comment = {
                    'type': comment_type,
                    'content': comment_text,
                    'file_id': comment_file_id,
                    'file_name': comment_file_name
                }

            reminder_data = {
                'job_id': job_id,
                'text': text,
                'time': time_str,
                'frequency': frequency,
                'frequency_text': freq_text,
                'comment': comment
            }

            await self.schedule_reminder(user_id, reminder_data)

    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        timezone = await self.get_user_timezone(user.id)

        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
            f"–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.\n"
            f"–¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:",
            reply_markup=self.main_menu_keyboard
        )

    async def handle_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        text = update.message.text

        if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
                reply_markup=self.cancel_keyboard
            )
            return SETTING_REMINDER_TEXT

        elif text == "üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π":
            return await self.show_reminders_list(update)

        elif text == "‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
            return await self.show_delete_menu(update)

        elif text == "üåç –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å":
            return await self.show_timezone_menu(update)

        elif text == "üîÑ –¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
            return await self.send_test_reminder(update)

        else:
            await update.message.reply_text(
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
                reply_markup=self.main_menu_keyboard
            )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    async def set_reminder_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        if update.message.text == "üîô –û—Ç–º–µ–Ω–∞":
            await update.message.reply_text(
                "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=self.main_menu_keyboard
            )
            return ConversationHandler.END

        context.user_data['reminder_text'] = update.message.text

        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):",
            reply_markup=self.cancel_keyboard
        )
        return SETTING_REMINDER_TIME

    async def set_reminder_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        if update.message.text == "üîô –û—Ç–º–µ–Ω–∞":
            await update.message.reply_text(
                "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=self.main_menu_keyboard
            )
            return ConversationHandler.END

        try:
            time_str = update.message.text
            datetime.strptime(time_str, "%H:%M")
            context.user_data['reminder_time'] = time_str

            keyboard = [
                [InlineKeyboardButton("–û–¥–∏–Ω —Ä–∞–∑", callback_data='once')],
                [InlineKeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data='daily')],
                [InlineKeyboardButton("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data='weekly')],
                [InlineKeyboardButton("–ü–æ –±—É–¥–Ω—è–º (–ü–Ω-–ü—Ç)", callback_data='weekdays')],
                [InlineKeyboardButton("–ü–Ω, –°—Ä, –ü—Ç", callback_data='mon_wed_fri')],
                [InlineKeyboardButton("–í—Ç, –ß—Ç", callback_data='tue_thu')]
            ]

            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return SETTING_REMINDER_FREQUENCY

        except ValueError:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30):",
                reply_markup=self.cancel_keyboard
            )
            return SETTING_REMINDER_TIME

    async def set_reminder_frequency(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        query = update.callback_query
        await query.answer()

        frequency_mapping = {
            'once': "–û–¥–∏–Ω —Ä–∞–∑",
            'daily': "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ",
            'weekly': "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ",
            'weekdays': "–ü–æ –±—É–¥–Ω—è–º (–ü–Ω-–ü—Ç)",
            'mon_wed_fri': "–ü–Ω, –°—Ä, –ü—Ç",
            'tue_thu': "–í—Ç, –ß—Ç"
        }

        frequency = query.data
        context.user_data['frequency'] = frequency
        context.user_data['frequency_text'] = frequency_mapping[frequency]

        keyboard = ReplyKeyboardMarkup(
            [
                [KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
                [KeyboardButton("üîô –û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True
        )

        await query.edit_message_text(
            f"–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {frequency_mapping[frequency]}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'."
        )
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text="–û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è...",
            reply_markup=keyboard
        )
        return SETTING_REMINDER_COMMENT

    async def set_reminder_comment(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—é"""
        user = update.effective_user

        if update.message.text == "üîô –û—Ç–º–µ–Ω–∞":
            await update.message.reply_text(
                "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=self.main_menu_keyboard
            )
            return ConversationHandler.END

        comment = None
        if update.message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            if update.message.photo:
                photo: PhotoSize = update.message.photo[-1]
                comment = {
                    'type': 'photo',
                    'file_id': photo.file_id,
                    'content': update.message.caption
                }
            elif update.message.document:
                document: Document = update.message.document
                comment = {
                    'type': 'document',
                    'file_id': document.file_id,
                    'file_name': document.file_name,
                    'content': update.message.caption
                }
            else:
                comment = {
                    'type': 'text',
                    'content': update.message.text
                }

        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
        job_id = f"reminder_{user.id}_{datetime.now().timestamp()}"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await self.save_reminder_to_database(
            user_id=user.id,
            job_id=job_id,
            reminder_text=context.user_data['reminder_text'],
            reminder_time=context.user_data['reminder_time'],
            frequency=context.user_data['frequency'],
            frequency_text=context.user_data['frequency_text'],
            comment=comment
        )

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        reminder_data = {
            'job_id': job_id,
            'text': context.user_data['reminder_text'],
            'time': context.user_data['reminder_time'],
            'frequency': context.user_data['frequency'],
            'frequency_text': context.user_data['frequency_text'],
            'comment': comment
        }

        await self.schedule_reminder(user.id, reminder_data)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
        timezone = await self.get_user_timezone(user.id)
        message = (
            "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
            f"üìù –¢–µ–∫—Å—Ç: {context.user_data['reminder_text']}\n"
            f"‚è∞ –í—Ä–µ–º—è: {context.user_data['reminder_time']} ({timezone})\n"
            f"üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {context.user_data['frequency_text']}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {self.format_comment(comment)}"
        )

        await update.message.reply_text(
            message,
            reply_markup=self.main_menu_keyboard
        )

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()
        return ConversationHandler.END

    def format_comment(self, comment: Optional[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not comment:
            return "–Ω–µ—Ç"

        if comment['type'] == 'text':
            return f"—Ç–µ–∫—Å—Ç: {comment['content']}"
        elif comment['type'] == 'photo':
            return "—Ñ–æ—Ç–æ" + (f" ({comment['content']})" if comment['content'] else "")
        elif comment['type'] == 'document':
            return f"–¥–æ–∫—É–º–µ–Ω—Ç: {comment.get('file_name', '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}" + \
                (f" ({comment['content']})" if comment['content'] else "")
        return "–≤–ª–æ–∂–µ–Ω–∏–µ"

    # –ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
    async def schedule_reminder(self, user_id: int, reminder: Dict):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é APScheduler"""
        try:
            hour, minute = map(int, reminder['time'].split(':'))
            timezone = pytz.timezone(await self.get_user_timezone(user_id))

            if reminder['frequency'] == 'once':
                # –î–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                now = datetime.now(timezone)
                reminder_time = timezone.localize(
                    datetime.combine(now.date(), time(hour, minute))
                )

                if reminder_time < now:
                    reminder_time += timedelta(days=1)

                trigger = DateTrigger(reminder_time)
            else:
                # –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                frequency_map = {
                    'daily': '*',  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å
                    'weekly': 'sun-sat',  # –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é
                    'weekdays': 'mon-fri',  # –ü–æ –±—É–¥–Ω—è–º
                    'mon_wed_fri': 'mon,wed,fri',  # –ü–Ω, –°—Ä, –ü—Ç
                    'tue_thu': 'tue,thu'  # –í—Ç, –ß—Ç
                }

                trigger = CronTrigger(
                    hour=hour,
                    minute=minute,
                    day_of_week=frequency_map[reminder['frequency']],
                    timezone=timezone
                )

            self.scheduler.add_job(
                self.send_reminder,
                trigger=trigger,
                args=[user_id, reminder['job_id']],
                id=reminder['job_id'],
                replace_existing=True
            )

        except Exception as error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {error}")

    async def send_reminder(self, user_id: int, job_id: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            connection = sqlite3.connect('reminders.db')
            cursor = connection.cursor()

            cursor.execute(
                'SELECT * FROM reminders WHERE job_id = ?',
                (job_id,)
            )
            reminder = cursor.fetchone()
            connection.close()

            if not reminder:
                logger.error(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {job_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return

            _, _, text, time_str, frequency, freq_text, comment_type, comment_text, comment_file_id, comment_file_name, _ = reminder

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            timezone = pytz.timezone(await self.get_user_timezone(user_id))
            current_time = datetime.now(timezone).strftime('%H:%M %Z')
            message = f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}\nüïí –í–∞—à–µ –≤—Ä–µ–º—è: {current_time}"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            if comment_type:
                comment = {
                    'type': comment_type,
                    'content': comment_text,
                    'file_id': comment_file_id,
                    'file_name': comment_file_name
                }

                if comment['type'] == 'text':
                    await self.application.bot.send_message(
                        chat_id=user_id,
                        text=f"{message}\n\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment['content']}"
                    )
                elif comment['type'] == 'photo':
                    await self.application.bot.send_photo(
                        chat_id=user_id,
                        photo=comment['file_id'],
                        caption=message + (f"\n\nüí¨ {comment['content']}" if comment['content'] else "")
                    )
                elif comment['type'] == 'document':
                    await self.application.bot.send_document(
                        chat_id=user_id,
                        document=comment['file_id'],
                        caption=message + (f"\n\nüí¨ {comment['content']}" if comment['content'] else "")
                    )
            else:
                await self.application.bot.send_message(
                    chat_id=user_id,
                    text=message
                )

            # –ï—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ - —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if frequency == 'once':
                await self.delete_reminder_from_database(job_id)

            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {job_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        except telegram.error.Forbidden:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            await self.delete_reminder_from_database(job_id)
        except Exception as error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {job_id}: {error}")

    async def show_reminders_list(self, update: Update):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        reminders = await self.get_user_reminders(user.id)

        if not reminders:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
                reply_markup=self.main_menu_keyboard
            )
            return

        message = "üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
        for i, reminder in enumerate(reminders, 1):
            message += (
                f"{i}. {reminder['text']}\n"
                f"   ‚è∞ –í—Ä–µ–º—è: {reminder['time']}\n"
                f"   üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {reminder['frequency_text']}\n"
                f"   üÜî ID: {reminder['job_id']}\n\n"
            )

        await update.message.reply_text(
            message,
            reply_markup=self.main_menu_keyboard
        )

    async def show_delete_menu(self, update: Update):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        user = update.effective_user
        reminders = await self.get_user_reminders(user.id)

        if not reminders:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
                reply_markup=self.main_menu_keyboard
            )
            return

        keyboard = []
        for reminder in reminders:
            keyboard.append(
                [KeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {reminder['job_id']}")]
            )

        keyboard.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )

    async def delete_reminder(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        user = update.effective_user
        job_id = update.message.text.replace("‚ùå –£–¥–∞–ª–∏—Ç—å ", "").strip()

        # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await self.delete_reminder_from_database(job_id)

        # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        try:
            self.scheduler.remove_job(job_id)
        except:
            pass

        await update.message.reply_text(
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {job_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.",
            reply_markup=self.main_menu_keyboard
        )

    # –ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
    async def show_timezone_menu(self, update: Update):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
        keyboard = [
            [InlineKeyboardButton("–ú–æ—Å–∫–≤–∞ (MSK)", callback_data='Europe/Moscow')],
            [InlineKeyboardButton("–ö–∏–µ–≤ (EET)", callback_data='Europe/Kiev')],
            [InlineKeyboardButton("–õ–æ–Ω–¥–æ–Ω (GMT)", callback_data='Europe/London')],
            [InlineKeyboardButton("–ù—å—é-–ô–æ—Ä–∫ (EST)", callback_data='America/New_York')]
        ]

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_timezone_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
        query = update.callback_query
        await query.answer()

        user = query.from_user
        timezone = query.data

        await self.set_user_timezone(user.id, timezone)

        await query.edit_message_text(
            f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {timezone}",
            reply_markup=self.main_menu_keyboard
        )

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    async def send_test_reminder(self, update: Update):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        user = update.effective_user
        timezone = await self.get_user_timezone(user.id)

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        job_id = f"test_{user.id}_{datetime.now().timestamp()}"
        reminder_data = {
            'job_id': job_id,
            'text': "–¢–ï–°–¢–û–í–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï",
            'time': (datetime.now(pytz.timezone(timezone)) + timedelta(minutes=1)).strftime('%H:%M'),
            'frequency': 'once',
            'frequency_text': '–û–¥–∏–Ω —Ä–∞–∑',
            'comment': None
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await self.save_reminder_to_database(
            user_id=user.id,
            job_id=job_id,
            reminder_text=reminder_data['text'],
            reminder_time=reminder_data['time'],
            frequency=reminder_data['frequency'],
            frequency_text=reminder_data['frequency_text'],
            comment=None
        )

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º
        await self.schedule_reminder(user.id, reminder_data)

        await update.message.reply_text(
            f"–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É.\n"
            f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}",
            reply_markup=self.main_menu_keyboard
        )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤ –±–æ—Ç–µ"""
        logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ:", exc_info=context.error)

        if update and update.message:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=self.main_menu_keyboard
            )

    async def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º"""
        token = os.getenv("TELEGRAM_BOT_TOKEN")
        if not token:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

        # –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(token).build()
        await self.application.initialize()  # –Ø–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.setup_handlers()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        await self.load_all_reminders()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self.scheduler.start()

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            await self.application.start()
            async with self.application:
                await self.application.updater.start_polling()
                while True:
                    await asyncio.sleep(3600)

        except (KeyboardInterrupt, SystemExit):
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        finally:
            await self.shutdown()

    async def shutdown(self):
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        
        if hasattr(self, 'scheduler') and self.scheduler.running:
            self.scheduler.shutdown()
        
        if hasattr(self, 'application'):
            try:
                if self.application.running:
                    await self.application.stop()
                    await self.application.shutdown()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
        
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def ping(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
        await update.message.reply_text("üü¢ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        self.application.add_handler(CommandHandler('ping', self.ping))

        conv_handler = ConversationHandler(
            entry_points=[
                MessageHandler(filters.Regex(r'^‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ$'), self.handle_main_menu)
            ],
            states={
                SETTING_REMINDER_TEXT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.set_reminder_text)
                ],
                SETTING_REMINDER_TIME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.set_reminder_time)
                ],
                SETTING_REMINDER_FREQUENCY: [
                    CallbackQueryHandler(self.set_reminder_frequency)
                ],
                SETTING_REMINDER_COMMENT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.set_reminder_comment),
                    MessageHandler(filters.PHOTO, self.set_reminder_comment),
                    MessageHandler(filters.Document.ALL, self.set_reminder_comment),
                    MessageHandler(filters.Regex(r'^–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å$'), self.set_reminder_comment)
                ],
            },
            fallbacks=[
                MessageHandler(filters.Regex(r'^üîô –û—Ç–º–µ–Ω–∞$'), self.set_reminder_comment)
            ]
        )

        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler('start', self.start_command))
        self.application.add_handler(conv_handler)
        self.application.add_handler(MessageHandler(filters.TEXT, self.handle_main_menu))
        self.application.add_handler(CallbackQueryHandler(self.handle_timezone_selection))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
        self.application.add_handler(MessageHandler(
            filters.Regex(r'^‚ùå –£–¥–∞–ª–∏—Ç—å '),
            self.delete_reminder
        ))


if __name__ == '__main__':
    bot = ReminderBot()
    try:
        asyncio.run(bot.run())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
